import streamlit as st
import yfinance as yf
import pandas as pd
from prophet import Prophet
from prophet.plot import plot_plotly
import plotly.graph_objects as go
import requests
from bs4 import BeautifulSoup
import ssl

# -------------------------------------------
# T·∫Øt verify SSL ƒë·ªÉ tr√°nh l·ªói CERTIFICATE_VERIFY_FAILED
# -------------------------------------------
ssl._create_default_https_context = ssl._create_unverified_context

# -------------------------------------------
# L·∫•y t√™n c√¥ng ty t·ª´ website HNX (n·∫øu c√≥)
# -------------------------------------------
def get_company_name(stock_code):
    try:
        url = f"https://www.hnx.vn/vi-vn/co-phieu-{stock_code}.html"
        headers = {"User-Agent": "Mozilla/5.0"}
        resp = requests.get(url, headers=headers, timeout=10, verify=False)
        if resp.status_code != 200:
            return "Kh√¥ng t√¨m th·∫•y th√¥ng tin c√¥ng ty"
        soup = BeautifulSoup(resp.text, "html.parser")
        title = soup.find("title")
        if title and stock_code.upper() in title.text:
            name = title.text.split("|")[0].strip()
            return name
        return "Kh√¥ng t√¨m th·∫•y t√™n c√¥ng ty"
    except Exception as e:
        return f"Kh√¥ng th·ªÉ l·∫•y t√™n c√¥ng ty: {e}"

# -------------------------------------------
# H√†m t·∫£i d·ªØ li·ªáu an to√†n (c√≥ cache)
# -------------------------------------------
@st.cache_data(ttl=3600)
def load_stock_data(stock_code):
    df = yf.download(f"{stock_code}.VN", period="6mo", progress=False)
    if df.empty:
        df = yf.download(stock_code, period="6mo", progress=False)
    if df is None or df.empty:
        return None

    df = df.reset_index()
    if isinstance(df.columns, pd.MultiIndex):
        df.columns = [c[0] if isinstance(c, tuple) else c for c in df.columns]

    # t√¨m c·ªôt close
    possible_close_cols = [c for c in df.columns if c.lower() in ("close", "adj close", "adjclose")]
    if not possible_close_cols:
        return None
    close_col = possible_close_cols[0]
    df = df[["Date", close_col]].rename(columns={close_col: "Close"})
    df = df.dropna(subset=["Date", "Close"])
    if df.empty:
        return None
    return df

# -------------------------------------------
# Hu·∫•n luy·ªán m√¥ h√¨nh Prophet (an to√†n)
# -------------------------------------------
@st.cache_resource
def train_prophet_model(df):
    try:
        if "Date" in df.columns and "Close" in df.columns:
            df = df.rename(columns={"Date": "ds", "Close": "y"})
        df["ds"] = pd.to_datetime(df["ds"], errors="coerce")
        df["y"] = pd.to_numeric(df["y"], errors="coerce")
        df = df.dropna(subset=["ds", "y"]).sort_values("ds")
        df = df.drop_duplicates(subset="ds", keep="last").reset_index(drop=True)

        if len(df) < 10:
            return None, "D·ªØ li·ªáu qu√° √≠t ƒë·ªÉ d·ª± ƒëo√°n"

        model = Prophet(daily_seasonality=True)
        model.fit(df)
        return model, None
    except Exception as e:
        return None, f"L·ªói khi train Prophet: {e}"

# -------------------------------------------
# Giao di·ªán ch√≠nh
# -------------------------------------------
st.set_page_config(page_title="D·ª± ƒëo√°n gi√° c·ªï phi·∫øu - Prophet", layout="wide")

st.title("üìà D·ª± ƒëo√°n gi√° c·ªï phi·∫øu b·∫±ng Prophet")

stock_code = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu (v√≠ d·ª•: FPT, VCB, HPG...):").strip().upper()

days_to_predict = st.slider("S·ªë ng√†y mu·ªën d·ª± ƒëo√°n", 7, 60, 14)

if stock_code:
    with st.spinner("‚è≥ ƒêang t·∫£i d·ªØ li·ªáu..."):
        df = load_stock_data(stock_code)

    if df is None or df.empty:
        st.error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ c·ªï phi·∫øu n√†y.")
    else:
        company_name = get_company_name(stock_code)
        st.subheader(f"üè¢ {stock_code} - {company_name}")
        st.write("**D·ªØ li·ªáu g·∫ßn nh·∫•t:**")
        st.dataframe(df.tail(10))

        model, err = train_prophet_model(df)
        if err:
            st.error(err)
        else:
            with st.spinner("üß† ƒêang d·ª± ƒëo√°n..."):
                future = model.make_future_dataframe(periods=days_to_predict)
                forecast = model.predict(future)

            st.subheader("üìÖ Bi·ªÉu ƒë·ªì d·ª± ƒëo√°n gi√°")
            fig = plot_plotly(model, forecast)
            st.plotly_chart(fig, use_container_width=True)

            st.subheader("üìä B·∫£ng d·ªØ li·ªáu d·ª± ƒëo√°n")
            st.dataframe(forecast[["ds", "yhat", "yhat_lower", "yhat_upper"]].tail(days_to_predict))

            # Xu h∆∞·ªõng d·ª± ƒëo√°n
            last_price = df["Close"].iloc[-1]
            avg_next = forecast["yhat"].tail(days_to_predict).mean()
            diff_pct = ((avg_next - last_price) / last_price) * 100
            trend = "üìà TƒÇNG" if diff_pct > 0 else "üìâ GI·∫¢M"
            st.markdown(
                f"""
                ### üîç Ph√¢n t√≠ch xu h∆∞·ªõng
                - Gi√° hi·ªán t·∫°i: **{last_price:,.2f}**
                - Gi√° trung b√¨nh {days_to_predict} ng√†y t·ªõi: **{avg_next:,.2f}**
                - Ch√™nh l·ªách: **{diff_pct:+.2f}%**
                - D·ª± b√°o xu h∆∞·ªõng: **{trend}**
                """
            )
else:
    st.info("üí° Nh·∫≠p m√£ c·ªï phi·∫øu ƒë·ªÉ b·∫Øt ƒë·∫ßu d·ª± ƒëo√°n (v√≠ d·ª•: FPT, VCB, HPG...)")
