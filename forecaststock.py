# app.py
import streamlit as st
import yfinance as yf
import pandas as pd
from prophet import Prophet
from datetime import datetime
import matplotlib.pyplot as plt
import requests
from bs4 import BeautifulSoup
import certifi

# =====================
# Streamlit page config
# =====================
st.set_page_config(page_title="üìà D·ª± ƒëo√°n c·ªï phi·∫øu Vi·ªát Nam (Prophet)", layout="wide")
st.title("üìà D·ª± ƒëo√°n xu h∆∞·ªõng c·ªï phi·∫øu Vi·ªát Nam b·∫±ng Prophet")
st.write("Nh·∫≠p m√£ c·ªï phi·∫øu HNX/HOSE, v√≠ d·ª•: FPT, SSI, VNM, VIC, HAG ...")

# =====================
# H√†m l·∫•y t√™n c√¥ng ty t·ª´ HNX.vn
# =====================
def get_company_name(stock_code):
    """
    L·∫•y t√™n c√¥ng ty t·ª´ HNX.vn
    fallback: n·∫øu l·ªói SSL ho·∫∑c kh√¥ng t√¨m th·∫•y ‚Üí tr·∫£ v·ªÅ th√¥ng b√°o
    """
    try:
        url = f"https://www.hnx.vn/vi-vn/co-phieu-{stock_code}.html"
        # B·ªè verify SSL ƒë·ªÉ tr√°nh l·ªói tr√™n m√°y kh√¥ng c√≥ ch·ª©ng ch·ªâ
        res = requests.get(url, timeout=10, verify=False)
        if res.status_code == 200:
            # D√πng parser m·∫∑c ƒë·ªãnh html.parser
            soup = BeautifulSoup(res.text, "html.parser")
            h1 = soup.find("h1")
            if h1:
                return h1.text.strip()
            div_title = soup.find("div", class_="company-title")
            if div_title:
                return div_title.text.strip()
        return "Kh√¥ng t√¨m th·∫•y t√™n c√¥ng ty"
    except Exception as e:
        return f"Kh√¥ng th·ªÉ l·∫•y t√™n c√¥ng ty: {e}"
# =====================
# Nh·∫≠p d·ªØ li·ªáu
# =====================
stock_code = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="FPT").upper().strip()
days_to_predict = st.slider("S·ªë ng√†y c·∫ßn d·ª± ƒëo√°n:", 7, 60, 15)

if st.button("üîç Ph√¢n t√≠ch & D·ª± ƒëo√°n") and stock_code:
    # --------------------
    # L·∫•y t√™n c√¥ng ty
    # --------------------
    company_name = get_company_name(stock_code)
    st.write(f"**M√£ c·ªï phi·∫øu:** {stock_code}")
    st.write(f"**T√™n c√¥ng ty:** {company_name}")

    try:
        # --------------------
        # L·∫•y d·ªØ li·ªáu c·ªï phi·∫øu 1 nƒÉm qua
        # --------------------
        df = yf.download(f"{stock_code}.VN", period="1y", progress=False)
        if df.empty:
            df = yf.download(stock_code, period="1y", progress=False)

        if df.empty:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ n√†y. H√£y th·ª≠ m√£ kh√°c.")
        else:
            # --------------------
            # L√†m s·∫°ch d·ªØ li·ªáu
            # --------------------
            df = df.reset_index()
            if isinstance(df.columns, pd.MultiIndex):
                df.columns = [c[0] for c in df.columns]
            df = df[["Date", "Close"]].dropna()
            if df.empty or df["Close"].nunique() < 5:
                st.error("‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng ƒë·ªß ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh.")
            else:
                df = df.rename(columns={"Date": "ds", "Close": "y"})
                df["ds"] = pd.to_datetime(df["ds"])
                df["y"] = df["y"].astype(float)

                # --------------------
                # Hu·∫•n luy·ªán Prophet
                # --------------------
                model = Prophet(daily_seasonality=True)
                model.fit(df)

                # --------------------
                # D·ª± ƒëo√°n
                # --------------------
                future = model.make_future_dataframe(periods=days_to_predict)
                forecast = model.predict(future)

                # --------------------
                # Bi·ªÉu ƒë·ªì gi√° d·ª± ƒëo√°n
                # --------------------
                fig1 = model.plot(forecast)
                st.pyplot(fig1)

                with st.expander("üîç Xem chi ti·∫øt th√†nh ph·∫ßn xu h∆∞·ªõng"):
                    fig2 = model.plot_components(forecast)
                    st.pyplot(fig2)

                # --------------------
                # Ph√¢n t√≠ch xu h∆∞·ªõng
                # --------------------
                current_price = df["y"].iloc[-1]
                avg_future = forecast["yhat"].iloc[-days_to_predict:].mean()
                change_percent = ((avg_future - current_price) / current_price) * 100
                trend = "üìà **TƒÉng**" if change_percent > 0 else "üìâ **Gi·∫£m**"

                st.markdown(f"""
                ## üîé K·∫øt qu·∫£ d·ª± b√°o
                - **M√£ c·ªï phi·∫øu:** `{stock_code}`
                - **T√™n c√¥ng ty:** {company_name}
                - **Gi√° hi·ªán t·∫°i:** {current_price:,.2f} VND  
                - **Gi√° trung b√¨nh {days_to_predict} ng√†y t·ªõi:** {avg_future:,.2f} VND  
                - **Ch√™nh l·ªách:** {change_percent:+.2f}%  
                - **Xu h∆∞·ªõng d·ª± ki·∫øn:** {trend}
                """)

                # --------------------
                # Xu·∫•t CSV
                # --------------------
                df_export = forecast[["ds", "yhat", "yhat_lower", "yhat_upper"]].tail(days_to_predict)
                csv = df_export.to_csv(index=False).encode("utf-8")
                st.download_button(
                    "üì• T·∫£i d·ªØ li·ªáu d·ª± ƒëo√°n (CSV)",
                    data=csv,
                    file_name=f"{stock_code}_forecast_prophet.csv",
                    mime="text/csv",
                )

    except Exception as e:
        st.error(f"‚ö†Ô∏è L·ªói khi t·∫£i ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu: {e}")
