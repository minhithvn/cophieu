import streamlit as st
import yfinance as yf
import pandas as pd
from prophet import Prophet
from datetime import datetime
import matplotlib.pyplot as plt

st.set_page_config(page_title="D·ª± ƒëo√°n xu h∆∞·ªõng c·ªï phi·∫øu (Prophet)", layout="wide")
st.title("üìà D·ª± ƒëo√°n xu h∆∞·ªõng c·ªï phi·∫øu Vi·ªát Nam (HNX / HOSE) b·∫±ng Prophet")
st.write("Nh·∫≠p m√£ c·ªï phi·∫øu b·∫°n mu·ªën d·ª± ƒëo√°n (v√≠ d·ª•: `FPT`, `VNM`, `SSI`, `VIC`, `HAG` ...)")

symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu:", value="FPT").upper().strip()
days_to_predict = st.slider("S·ªë ng√†y c·∫ßn d·ª± ƒëo√°n:", 7, 60, 15)

if st.button("üîç Ph√¢n t√≠ch & D·ª± ƒëo√°n"):
    try:
        # --------------------------
        # 1Ô∏è‚É£ L·∫•y d·ªØ li·ªáu
        # --------------------------
        df = yf.download(f"{symbol}.VN", period="1y", progress=False)

        # N·∫øu r·ªóng th√¨ th·ª≠ b·ªè ƒëu√¥i .VN
        if df.empty:
            df = yf.download(symbol, period="1y", progress=False)

        if df.empty:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ n√†y. H√£y th·ª≠ m√£ kh√°c (FPT, SSI, VNM, VIC...)")
        else:
            # --------------------------
            # 2Ô∏è‚É£ L√†m s·∫°ch d·ªØ li·ªáu
            # --------------------------
            df = df.reset_index()

            # M·ªôt s·ªë m√£ c√≥ MultiIndex
            if isinstance(df.columns, pd.MultiIndex):
                df.columns = [c[0] for c in df.columns]

            # Ch·ªâ gi·ªØ c√°c d√≤ng c√≥ gi√° tr·ªã h·ª£p l·ªá
            df = df[["Date", "Close"]].dropna()

            if df.empty or df["Close"].nunique() < 5:
                st.error("‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng ƒë·ªß ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh.")
            else:
                # --------------------------
                # 3Ô∏è‚É£ Chu·∫©n h√≥a d·ªØ li·ªáu Prophet
                # --------------------------
                df = df.rename(columns={"Date": "ds", "Close": "y"})
                df["ds"] = pd.to_datetime(df["ds"])
                df["y"] = df["y"].astype(float)

                # --------------------------
                # 4Ô∏è‚É£ Hu·∫•n luy·ªán Prophet
                # --------------------------
                model = Prophet(daily_seasonality=True)
                model.fit(df)

                # --------------------------
                # 5Ô∏è‚É£ D·ª± ƒëo√°n
                # --------------------------
                future = model.make_future_dataframe(periods=days_to_predict)
                forecast = model.predict(future)

                # --------------------------
                # 6Ô∏è‚É£ Bi·ªÉu ƒë·ªì
                # --------------------------
                fig1 = model.plot(forecast)
                st.pyplot(fig1)

                with st.expander("üîç Xem chi ti·∫øt th√†nh ph·∫ßn xu h∆∞·ªõng"):
                    fig2 = model.plot_components(forecast)
                    st.pyplot(fig2)

                # --------------------------
                # 7Ô∏è‚É£ Ph√¢n t√≠ch k·∫øt qu·∫£
                # --------------------------
                current_price = df["y"].iloc[-1]
                avg_future = forecast["yhat"].iloc[-days_to_predict:].mean()
                change_percent = ((avg_future - current_price) / current_price) * 100
                trend = "üìà **TƒÉng**" if change_percent > 0 else "üìâ **Gi·∫£m**"

                st.markdown(f"""
                ## üîé K·∫øt qu·∫£ d·ª± b√°o
                - **M√£ c·ªï phi·∫øu:** `{symbol}`
                - **Gi√° hi·ªán t·∫°i:** {current_price:,.2f} VND  
                - **Gi√° trung b√¨nh {days_to_predict} ng√†y t·ªõi:** {avg_future:,.2f} VND  
                - **Ch√™nh l·ªách:** {change_percent:+.2f}%  
                - **Xu h∆∞·ªõng d·ª± ki·∫øn:** {trend}
                """)

                # --------------------------
                # 8Ô∏è‚É£ Xu·∫•t CSV
                # --------------------------
                df_export = forecast[["ds", "yhat", "yhat_lower", "yhat_upper"]].tail(days_to_predict)
                csv = df_export.to_csv(index=False).encode("utf-8")
                st.download_button(
                    "üì• T·∫£i d·ªØ li·ªáu d·ª± ƒëo√°n (CSV)",
                    data=csv,
                    file_name=f"{symbol}_forecast_prophet.csv",
                    mime="text/csv",
                )

    except Exception as e:
        st.error(f"‚ö†Ô∏è L·ªói khi t·∫£i ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu: {e}")
